#!/usr/bin/env bash

#############################################################################################################################################################################
#   The license used for this file and its contents is: BSD-3-Clause                                                                                                        #
#                                                                                                                                                                           #
#   Copyright <2023> <Uri Herrera <uri_herrera@nxos.org>>                                                                                                                   #
#                                                                                                                                                                           #
#   Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:                          #
#                                                                                                                                                                           #
#    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.                                        #
#                                                                                                                                                                           #
#    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer                                      #
#       in the documentation and/or other materials provided with the distribution.                                                                                         #
#                                                                                                                                                                           #
#    3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software                    #
#       without specific prior written permission.                                                                                                                          #
#                                                                                                                                                                           #
#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,                      #
#    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS                  #
#    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE                 #
#    GOODS OR SERVICES; LOSS OF USE, DATA,   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,                      #
#    STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   #
#############################################################################################################################################################################

set -eu


# -- Variables.

# xdg_config_path="/etc/skel/.config"
xdg_rc_path="/etc/xdg"
xdg_user_path="$HOME/.config"
xdg_session="$XDG_SESSION_TYPE"
desktop_config_log="$HOME/.desktop-config.log"
dist=$(grep -oP 'PRETTY_NAME=\K.*' /etc/os-release | tr -d '"')
vendor='Nitrux Latinoamericana S.C.'
fecha=$(date +%Y)
hora=$(date +%Y.%m.%d-%H.%M)


# -- Functions.

cp_rc() {
    cp -rf "$@"
}

del() {
    rm -rf "$@"
}

get_gpu_manufacturer() {
    nvidia-smi -L | awk -F ' ' '$3=="NVIDIA"{print $3; exit}'
}

usage() {
    script_name=$(basename "$0")
    echo "NX Desktop is our set of applied customizations to the Plasma 5 Desktop."
    echo
    echo -e "(c) $fecha Some Rights Reserved. Made by $vendor"
    echo
    echo "Usage: $script_name [--restart-desktop] [--restart-wm] [--show-window-titlebar] [--hide-window-titlebar] [--help]"
    echo
    echo "  --restart-desktop          Restart KDE Plasma"
    echo "  --restart-wm               Restart KWin X11"
    echo "  --show-window-titlebar     Show the window titlebar"
    echo "  --hide-window-titlebar     Don't show the window titlebar"
    echo "  --help                     Display this help message"
}

check_plasmashell_running() {
    pgrep -x plasmashell >/dev/null
}

check_kwin_x11_running() {
    pgrep -x kwin_x11 >/dev/null
}


# -- Detect whether the session is X11 or Wayland and if it's running on NVIDIA or MESA.

main_script() {
( echo ' ';
echo "=========================="
echo "Logging started at $hora"
echo ' ';
echo -e "Welcome to $dist";
echo ' ';
echo -e "(c) $fecha Some Rights Reserved. Made by $vendor";
echo ' ';

if [ "${xdg_session}" == "wayland" ]; then
    echo "This is Wayland"
    if [ -f "$HOME/.nx-kwin-wayland-check" ]; then
        echo "Wayland first-run file exists"
        echo "Do nothing"
    else
        echo "Wayland first-run file does not exist"
        echo "Check if using NVIDIA or Mesa"
        if [ "$(get_gpu_manufacturer)" == "NVIDIA" ]; then
            echo "Detected as NVIDIA on Wayland"
            echo "NVIDIA on Wayland first-run file does not exist"
            echo "Creating first run file for NVIDIA on Wayland" >> "$HOME/.nx-nvidia-kwin-wayland-check"
            ln -sv "$HOME/.nx-nvidia-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check"
            cp_rc "$xdg_rc_path/bak.breezerc.wayland" "$xdg_user_path/breezerc"
            cp_rc "$xdg_rc_path/bak.kwinrc.wayland" "$xdg_user_path/kwinrc"
            cp_rc "$xdg_rc_path/bak.kwinrulesrc.wayland" "$xdg_user_path/kwinrulesrc"
            del "$HOME/.nx-kwin-x11-check" || true
        if grep -q "\[Xwayland\]" "$xdg_user_path/kwinrc"; then
            echo "[Xwayland] section exists, updating Scale setting."
            sed -i '/^\[Xwayland\]/,/^\[/ s/^Scale=.*/Scale=1/' "$xdg_user_path/kwinrc"
        else
            echo "Adding [Xwayland] section with Scale=1."
            echo -e "\n[Xwayland]\nScale=1" >> "$xdg_user_path/kwinrc"
        fi
            sleep 2
            kwin_wayland --replace
            sleep 1
            nohup plasmashell 2>&1 | tee -a "$desktop_config_log" &
        else
            echo "Detected as MESA on Wayland"
            echo "Creating Wayland first-run file for MESA on Wayland" >> "$HOME/.nx-mesa-kwin-wayland-check"
            ln -sv "$HOME/.nx-mesa-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check"
            cp_rc "$xdg_rc_path/bak.breezerc.wayland" "$xdg_user_path/breezerc"
            cp_rc "$xdg_rc_path/bak.kwinrc.wayland" "$xdg_user_path/kwinrc"
            cp_rc "$xdg_rc_path/bak.kwinrulesrc.wayland" "$xdg_user_path/kwinrulesrc"
            del "$HOME/.nx-kwin-x11-check" || true
            sleep 2
            kwin_wayland --replace
            sleep 1
            nohup plasmashell 2>&1 | tee -a "$desktop_config_log" &
        fi
    fi
else
    echo "This is not Wayland; it is X11"
    if [ -f "$HOME/.nx-kwin-x11-check" ]; then
        echo "X11 first-run file exists"
    else
        echo "X11 first-run file does not exist"
        echo "Detected as X11"
        echo "Creating X11 first-run file for X11" >> "$HOME/.nx-kwin-x11-check"
        cp_rc "$xdg_rc_path/bak.breezerc.x11" "$xdg_user_path/breezerc"
        cp_rc "$xdg_rc_path/bak.kwinrc.x11" "$xdg_user_path/kwinrc"
        cp_rc "$xdg_rc_path/bak.kwinrulesrc.x11" "$xdg_user_path/kwinrulesrc"
        del "$HOME/.nx-mesa-kwin-wayland-check" "$HOME/.nx-nvidia-kwin-wayland-check" "$HOME/.nx-kwin-wayland-check" || true
    fi
fi


# -- Manually start these Plasma services that, for some reason, don't autostart, even though they have files in /etc/xdg/autostart.

if pgrep -f "/usr/lib/x86_64-linux-gnu/libexec/org_kde_powerdevil" >/dev/null; then
  echo "Powerdevil process is already running."
else
  echo "Powerdevil process is not running. Starting it now..."
  nohup /usr/lib/x86_64-linux-gnu/libexec/org_kde_powerdevil >/dev/null 2>&1 &
fi

if pgrep -f "/usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1" >/dev/null; then
  echo "PolicyKit-Kde process is already running."
else
  echo "PolicyKit-Kde process is not running. Starting it now..."
  nohup /usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1 >/dev/null 2>&1 &
fi

if pgrep -f "fcitx5" >/dev/null; then
  echo "Fcitx5 process is already running, restarting it now..."
  killall fcitx5
  sleep 2
  fcitx5 2>&1 | tee -a "$desktop_config_log" &
else
  echo "Fcitx5 process is not running. Starting it now..."
  fcitx5 2>&1 | tee -a "$desktop_config_log" &
fi 

if pgrep -f "plasma-hud" >/dev/null; then
  echo "plasma-hud process is already running."
else
  echo "plasma-hud process is not running. Starting it now..."
  nohup /usr/lib/plasma-hud/plasma-hud >/dev/null 2>&1 &
fi


# -- Check if plasmashell is running, if not start it, or replace if it's running.

echo "Checking KDE Plasma is running..."
if check_plasmashell_running; then
    echo "Restarting KDE Plasma..."
    killall plasmashell
fi
nohup plasmashell --replace 2>&1 | tee -a "$desktop_config_log" & 


# -- Restart plasmashell again during the Live session if the Wayland session is running on NVIDIA hardware.
# -- But, only do this during the Live session because who the hell knows why plasmashell crashes here but not after installation.

if [ -f "$HOME/.nx-nvidia-kwin-wayland-check" ] && [ -f "/usr/bin/calamares" ]; then
    echo "Detected NVIDIA hardware with Wayland session in Live session. Restarting plasmashell again in 3 seconds..."
    sleep 3
    if check_plasmashell_running; then
        killall plasmashell
    fi
    nohup plasmashell --replace 2>&1 | tee -a "$desktop_config_log" &
fi ) 2>&1 | tee -a "$desktop_config_log"
}


# -- Check for command-line arguments.

if [ $# -eq 0 ]; then
    echo "No arguments provided. The script will run normally."
    main_script
else
    case "$1" in
        --restart-desktop)
            echo "Restarting KDE Plasma..."
            if check_plasmashell_running; then
                killall plasmashell
            fi
            nohup plasmashell --replace 2>&1 | tee -a "$desktop_config_log" &
            exit 0
            ;;
        --restart-wm)
            echo "Checking for Wayland session..."
            if [ -f "$HOME/.nx-kwin-wayland-check" ]; then
                echo "KWin Wayland is detected. KWin X11 cannot be restarted in a Wayland session."
                exit 1
            else
                echo "Restarting KWin X11..."
                if check_kwin_x11_running; then
                    killall kwin_x11
                    nohup kwin_x11 --replace 2>&1 | tee -a "$desktop_config_log" &
                    echo "KWin X11 restarted successfully."
                else
                    echo "KWin X11 is not running and cannot be restarted."
                fi
                exit 0
            fi
            ;;
        --show-window-titlebar)
            echo "Showing window titlebar..."
            sed -i 's/HideTitleBar=Always/HideTitleBar=Never/' "$HOME/.config/breezerc"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --hide-window-titlebar)
            echo "Hiding window titlebar..."
            sed -i 's/HideTitleBar=Never/HideTitleBar=Always/' "$HOME/.config/breezerc"
            echo "Reload KWin or change theme to apply changes..."
            exit 0
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Invalid argument: $1"
            usage
            exit 1
            ;;
    esac
fi
